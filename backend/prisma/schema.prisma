// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  name         String?
  details      String?
  profilePic   String?
  password     String
  posts        Post[]
  bookmarks    Bookmark[]
  claps        Clap[]
  comments     Comment[]
  subscribers  Subscriber[] @relation("UserSubscribers")
  subscribedTo Subscriber[] @relation("UserSubscribedTo")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  content       String
  publishedDate String     @default("")
  published     Boolean    @default(false)
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  bookmarks     Bookmark[]
  claps         Clap[]
  comments      Comment[]
  tagsOnPost    TagsOnPost[]
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Clap {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Comment {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Tag {
  id            String @id @default(uuid())
  tagName       String
  creationDate  DateTime     @default(now())
  tagsOnPost    TagsOnPost[]
}

model TagsOnPost {
  id      String @id @default(uuid())
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
}

model Subscriber {
  id            String   @id @default(uuid())
  userId        String
  subscriberId  String
  creationDate  DateTime @default(now())
  
  user          User     @relation("UserSubscribers", fields: [userId], references: [id])
  subscriber    User     @relation("UserSubscribedTo", fields: [subscriberId], references: [id])
}
